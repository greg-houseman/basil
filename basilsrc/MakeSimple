OBJDIR = ../objs
SRCDIR = ../basilsrc
BINDIR = ../bin
#
#  Compiler flags for linux, gfortran
#
FOR = gfortran
CC = gcc
CPP = gcc
#FFLAGS = -O
#CFLAGS = -O
#
# the following option needed for load step as a cc file is included
# This path found on ubuntu 20.04, using: find /usr/lib -name \*stdc++\* -print
# Turns out we don't need to specify path to it, just make sure the 
# LDFLAGS option placed after the OBJS in the load step
#LDFLAGS = -lstdc++ -L/usr/lib/gcc/x86_64-linux-gnu/9/
LDFLAGS = -lstdc++
#
CSRCS= $(SRCDIR)/basmain.c\
       $(SRCDIR)/tripoly.c $(SRCDIR)/trimesh.c $(SRCDIR)/triangle.c\
       $(SRCDIR)/c_funcs.c  $(SRCDIR)/polyutils.cc
#
FSRCS= $(SRCDIR)/basil.F $(SRCDIR)/input.f\
       $(SRCDIR)/crust.f $(SRCDIR)/cginit.f $(SRCDIR)/remesh.f\
       $(SRCDIR)/conjgr.f $(SRCDIR)/vsbcon.f $(SRCDIR)/kdvaux.f\
       $(SRCDIR)/mesh.f $(SRCDIR)/fltbcon.f $(SRCDIR)/fltgrid.f\
       $(SRCDIR)/rotate.f $(SRCDIR)/visvar.f\
       $(SRCDIR)/intstr.f $(SRCDIR)/lgmesh.f $(SRCDIR)/tvspres.f\
       $(SRCDIR)/mfix.f $(SRCDIR)/rotind.f $(SRCDIR)/cform.f\
       $(SRCDIR)/bforce.f $(SRCDIR)/topogb.f $(SRCDIR)/genflt.f\
       $(SRCDIR)/straie.f

SRCS = $(CSRCS) $(FSRCS)

OBJS = $(OBJDIR)/basmain.o\
       $(OBJDIR)/tripoly.o $(OBJDIR)/trimesh.o $(OBJDIR)/triangle.o\
       $(OBJDIR)/c_funcs.o $(OBJDIR)/polyutils.o\
       $(OBJDIR)/basil.o $(OBJDIR)/input.o\
       $(OBJDIR)/crust.o $(OBJDIR)/cginit.o $(OBJDIR)/remesh.o\
       $(OBJDIR)/conjgr.o $(OBJDIR)/vsbcon.o $(OBJDIR)/kdvaux.o\
       $(OBJDIR)/mesh.o $(OBJDIR)/fltbcon.o $(OBJDIR)/fltgrid.o\
       $(OBJDIR)/rotate.o $(OBJDIR)/visvar.o\
       $(OBJDIR)/intstr.o $(OBJDIR)/lgmesh.o $(OBJDIR)/tvspres.o\
       $(OBJDIR)/mfix.o $(OBJDIR)/rotind.o $(OBJDIR)/cform.o\
       $(OBJDIR)/bforce.o $(OBJDIR)/topogb.o $(OBJDIR)/straie.o\
       $(OBJDIR)/genflt.o
#
#  Included files:
#   input.data   used in input.f and lgmesh.f
#   polydata.h   used by polyutils.cc and trimesh.c
#   version.h    used in basmain.c
#   polyutils.h  used by polyutils.cc
#   tripoly.h    used by polyutils.h trimesh.c tripoly.c
#  Other items in basilsrc (unused ?)
#   remesh.hold
#   r4write.f     thermal.f  r8read.f 
#   modremesh.mod
# 
all:	$(BINDIR)/basil
#
$(BINDIR)/basil: ${OBJS} 
	$(FOR) ${OBJS} $(LDFLAGS) -o $(BINDIR)/basil
#  note LDFLAGS should follow OBJS, or the library is not found on at 
#  least one system (ununtu 20.04)
#
$(OBJDIR)/basmain.o: basmain.c version.h
	$(CC) -c $(CFLAGS) basmain.c -o $(OBJDIR)/basmain.o

$(OBJDIR)/tripoly.o: tripoly.c tripoly.h
	$(CC) -c $(CFLAGS) tripoly.c -o $(OBJDIR)/tripoly.o

$(OBJDIR)/trimesh.o: trimesh.c polydata.h tripoly.h
	$(CC) -c $(CFLAGS) trimesh.c -o $(OBJDIR)/trimesh.o

$(OBJDIR)/triangle.o: triangle.c
	$(CC) -c $(CFLAGS) -DTRILIBRARY triangle.c -o $(OBJDIR)/triangle.o
#  without -DTRILIBRARY the load step sees two main points and not triangulate

$(OBJDIR)/c_funcs.o: c_funcs.c
	$(CC) -c $(CFLAGS) c_funcs.c -o $(OBJDIR)/c_funcs.o

$(OBJDIR)/polyutils.o: polyutils.cc polydata.h polyutils.h tripoly.h
	$(CPP) -c $(CFLAGS) polyutils.cc -o $(OBJDIR)/polyutils.o

$(OBJDIR)/basil.o: basil.F
	$(FOR) -c $(FFLAGS) basil.F -o $(OBJDIR)/basil.o

$(OBJDIR)/input.o: input.f input.data
	$(FOR) -c $(FFLAGS) input.f -o $(OBJDIR)/input.o

$(OBJDIR)/crust.o: crust.f
	$(FOR) -c $(FFLAGS) crust.f -o $(OBJDIR)/crust.o

$(OBJDIR)/cginit.o: cginit.f
	$(FOR) -c $(FFLAGS) cginit.f -o $(OBJDIR)/cginit.o

$(OBJDIR)/conjgr.o: conjgr.f
	$(FOR) -c $(FFLAGS) conjgr.f -o $(OBJDIR)/conjgr.o

$(OBJDIR)/remesh.o: remesh.f
	$(FOR) -c $(FFLAGS) remesh.f -o $(OBJDIR)/remesh.o

$(OBJDIR)/vsbcon.o: vsbcon.f
	$(FOR) -c $(FFLAGS) vsbcon.f -o $(OBJDIR)/vsbcon.o

$(OBJDIR)/kdvaux.o: kdvaux.f
	$(FOR) -c $(FFLAGS) kdvaux.f -o $(OBJDIR)/kdvaux.o

$(OBJDIR)/mesh.o: mesh.f
	$(FOR) -c $(FFLAGS) mesh.f -o $(OBJDIR)/mesh.o

$(OBJDIR)/fltbcon.o: fltbcon.f
	$(FOR) -c $(FFLAGS) fltbcon.f -o $(OBJDIR)/fltbcon.o

$(OBJDIR)/fltgrid.o: fltgrid.f
	$(FOR) -c $(FFLAGS) fltgrid.f -o $(OBJDIR)/fltgrid.o

$(OBJDIR)/rotate.o: rotate.f
	$(FOR) -c $(FFLAGS) rotate.f -o $(OBJDIR)/rotate.o

$(OBJDIR)/visvar.o: visvar.f
	$(FOR) -c $(FFLAGS) visvar.f -o $(OBJDIR)/visvar.o

$(OBJDIR)/intstr.o: intstr.f
	$(FOR) -c $(FFLAGS) intstr.f -o $(OBJDIR)/intstr.o

$(OBJDIR)/lgmesh.o: lgmesh.f input.data
	$(FOR) -c $(FFLAGS) lgmesh.f -o $(OBJDIR)/lgmesh.o

$(OBJDIR)/tvspres.o: tvspres.f
	$(FOR) -c $(FFLAGS) tvspres.f -o $(OBJDIR)/tvspres.o

$(OBJDIR)/mfix.o: mfix.f
	$(FOR) -c $(FFLAGS) mfix.f -o $(OBJDIR)/mfix.o

$(OBJDIR)/rotind.o: rotind.f
	$(FOR) -c $(FFLAGS) rotind.f -o $(OBJDIR)/rotind.o

$(OBJDIR)/cform.o: cform.f
	$(FOR) -c $(FFLAGS) cform.f -o $(OBJDIR)/cform.o

$(OBJDIR)/bforce.o: bforce.f
	$(FOR) -c $(FFLAGS) bforce.f -o $(OBJDIR)/bforce.o

$(OBJDIR)/topogb.o: topogb.f
	$(FOR) -c $(FFLAGS) topogb.f -o $(OBJDIR)/topogb.o

$(OBJDIR)/straie.o: straie.f
	$(FOR) -c $(FFLAGS) straie.f -o $(OBJDIR)/straie.o

$(OBJDIR)/genflt.o: genflt.f
	$(FOR) -c $(FFLAGS) genflt.f -o $(OBJDIR)/genflt.o

clean:
	rm $(OBJDIR)/*.o
